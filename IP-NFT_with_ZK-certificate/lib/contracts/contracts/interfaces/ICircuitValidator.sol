// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.27;

import {IState} from "./IState.sol";

/**
 * @dev ICircuitValidator. Interface for circuit verification.
 */
interface ICircuitValidator {
    /**
     * @dev KeyToInputIndex. Information about public inputs of the circuit verification. Used in verify function.
     * @param key Name of the public input
     * @param inputIndex Index of the public input
     *
     * Note: Kept for backward compatibility. Now it's replaced by Signal struct for verifyV2 function.
     */
    struct KeyToInputIndex {
        string key;
        uint256 inputIndex;
    }

    /**
     * @dev Signal. Information about public signals of the circuit verification. Used in verifyV2 function.
     * @param name Name of the public signal
     * @param value Value of the public signal
     */
    struct Signal {
        string name;
        uint256 value;
    }

    /**
     * @dev Get version of the contract
     */
    function version() external view returns (string memory);

    /**
     * @dev Verify with the supported circuit informed in the request query data the groth16 proof
     * π=([πa]1,[πb]2,[πc]1) and that the proof was generated by the sender.
     * @param inputs Public inputs of the circuit.
     * @param a πa element of the groth16 proof.
     * @param b πb element of the groth16 proof.
     * @param c πc element of the groth16 proof.
     * @param data Request query data of the credential to verify.
     * @param sender Sender of the proof.
     * @return Array of key to public input index as result.
     */
    function verify(
        uint256[] memory inputs,
        uint256[2] memory a,
        uint256[2][2] memory b,
        uint256[2] memory c,
        bytes calldata data,
        address sender
    ) external returns (ICircuitValidator.KeyToInputIndex[] memory);

    /**
     * @dev Verify with the supported circuit informed in the request query data the groth16 proof
     * packed as bytes and that the proof was generated by the sender.
     * @param zkProof Proof packed as bytes to verify.
     * @param data Request query data of the credential to verify.
     * @param sender Sender of the proof.
     * @param state State contract to get identities and gist states to check.
     * @return Array of public signals as result.
     */
    function verifyV2(
        bytes calldata zkProof,
        bytes calldata data,
        address sender,
        IState state
    ) external returns (ICircuitValidator.Signal[] memory);

    /**
     * @dev Get supported circuit ids.
     * @return ids Array of circuit ids supported.
     */
    function getSupportedCircuitIds() external view returns (string[] memory ids);

    /**
     * @dev Get the index of the public input of the circuit by name.
     * @param name Name of the public input.
     * @return Index of the public input.
     */
    function inputIndexOf(string memory name) external view returns (uint256);
}
