{"noir_version":"0.36.0+801c71880ecf8386a26737a5d8bb5b4cb164b2ab","hash":3757305891418441506,"abi":{"parameters":[{"name":"value1","type":{"kind":"field"},"visibility":"public"},{"name":"value2","type":{"kind":"field"},"visibility":"public"},{"name":"value3","type":{"kind":"field"},"visibility":"public"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/62SXQ7CIBCE+av67kV2WSjLm1eRSO9/AiOmGMnaF9NOMtkJCWT4slqtujRb9Svd561PgjmEmnxFwjv4XDhCiGVmZIwcH56JKgdOueQEGQNVXGKmBVa54S34TyQP3t2uzU50ffash2yG7Hr+3JuaT83nzsEJBkYwgH1CeyDP6bheoDf+bsUuGPXlvLUv6gWnbLm1UQIAAA==","debug_symbols":"3ZHBCsIwEET/Zc85dJNok/6KSEnbtARCWtpUkNB/N2osAUXv3nZmHsMuG6DTzTrUxvXjAtUpgB1b5c3oogpQPKxlUu6uFq9mDxUyTkC7Lk5CbgR6YzVUZbGRN5RJTChndEcZ/4BSQWViqeDsO4xCHF87yOLwA8a9GbEUOXwmgP9+YhTNbKw1Q53/NtoXNRvVWJ1kv7o2S/11eiax4gY=","file_map":{"34":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"70":{"source":"use dep::std::hash::poseidon2;\n\nfn main(value1: pub Field, value2: pub Field, value3: pub Field) -> pub  Field {\n    let commitment = poseidon2::Poseidon2::hash([value1, value2, value3], 3);\n    commitment\n}\n\n\n// fn main(x: Field, y: pub Field) -> pub Field {\n//     assert(x == y);\n//     y\n// }\n","path":"/Users/unomasanori/Projects/DEMO_MVP/【Noir】【EDU Chain Hackathon - Semester 3】Feb 10 - Apr 10, 2025/climate-change_or_IP-NFT_with_ZK-certificate/poseidon-hash-generator/circuits/src/main.nr"}},"names":["main"],"brillig_names":[]}